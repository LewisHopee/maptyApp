{"mappings":"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","sources":["./script.js"],"sourcesContent":["'use strict';\n\nclass Workout {\n  date = new Date();\n  id = (Date.now() + '').slice(-10);\n  clicks = 0;\n\n  constructor(coords, distance, duration) {\n    // this.date = ...\n    // this.id = ...\n    this.coords = coords; // [lat, lng]\n    this.distance = distance; // in km\n    this.duration = duration; // in min\n  }\n\n  _setDescription() {\n    // prettier-ignore\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${\n      months[this.date.getMonth()]\n    } ${this.date.getDate()}`;\n  }\n\n  click() {\n    this.clicks++;\n  }\n}\n\nclass Running extends Workout {\n  type = 'running';\n\n  constructor(coords, distance, duration, cadence) {\n    super(coords, distance, duration);\n    this.cadence = cadence;\n    this.calcPace();\n    this._setDescription();\n  }\n\n  calcPace() {\n    // min/km\n    this.pace = this.duration / this.distance;\n    return this.pace;\n  }\n}\n\nclass Cycling extends Workout {\n  type = 'cycling';\n\n  constructor(coords, distance, duration, elevationGain) {\n    super(coords, distance, duration);\n    this.elevationGain = elevationGain;\n    // this.type = 'cycling';\n    this.calcSpeed();\n    this._setDescription();\n  }\n\n  calcSpeed() {\n    // km/h\n    this.speed = this.distance / (this.duration / 60);\n    return this.speed;\n  }\n}\n\n// const run1 = new Running([39, -12], 5.2, 24, 178);\n// const cycling1 = new Cycling([39, -12], 27, 95, 523);\n// console.log(run1, cycling1);\n\n///////////////////////////////////////\n// APPLICATION ARCHITECTURE\nconst form = document.querySelector('.form');\nconst containerWorkouts = document.querySelector('.workouts');\nconst inputType = document.querySelector('.form__input--type');\nconst inputDistance = document.querySelector('.form__input--distance');\nconst inputDuration = document.querySelector('.form__input--duration');\nconst inputCadence = document.querySelector('.form__input--cadence');\nconst inputElevation = document.querySelector('.form__input--elevation');\n\nclass App {\n  #map;\n  #mapZoomLevel = 13;\n  #mapEvent;\n  #workouts = [];\n\n  constructor() {\n    // Get user's position\n    this._getPosition();\n\n    // Get data from local storage\n    this._getLocalStorage();\n\n    // Attach event handlers\n    form.addEventListener('submit', this._newWorkout.bind(this));\n    inputType.addEventListener('change', this._toggleElevationField);\n    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));\n  }\n\n  _getPosition() {\n    if (navigator.geolocation)\n      navigator.geolocation.getCurrentPosition(\n        this._loadMap.bind(this),\n        function () {\n          alert('Could not get your position');\n        }\n      );\n  }\n\n  _loadMap(position) {\n    const { latitude } = position.coords;\n    const { longitude } = position.coords;\n    // console.log(`https://www.google.pt/maps/@${latitude},${longitude}`);\n\n    const coords = [latitude, longitude];\n\n    this.#map = L.map('map').setView(coords, this.#mapZoomLevel);\n\n    L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {\n      attribution:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    }).addTo(this.#map);\n\n    // Handling clicks on map\n    this.#map.on('click', this._showForm.bind(this));\n\n    this.#workouts.forEach(work => {\n      this._renderWorkoutMarker(work);\n    });\n  }\n\n  _showForm(mapE) {\n    this.#mapEvent = mapE;\n    form.classList.remove('hidden');\n    inputDistance.focus();\n  }\n\n  _hideForm() {\n    // Empty inputs\n    inputDistance.value = inputDuration.value = inputCadence.value = inputElevation.value =\n      '';\n\n    form.style.display = 'none';\n    form.classList.add('hidden');\n    setTimeout(() => (form.style.display = 'grid'), 1000);\n  }\n\n  _toggleElevationField() {\n    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\n    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\n  }\n\n  _newWorkout(e) {\n    const validInputs = (...inputs) =>\n      inputs.every(inp => Number.isFinite(inp));\n    const allPositive = (...inputs) => inputs.every(inp => inp > 0);\n\n    e.preventDefault();\n\n    // Get data from form\n    const type = inputType.value;\n    const distance = +inputDistance.value;\n    const duration = +inputDuration.value;\n    const { lat, lng } = this.#mapEvent.latlng;\n    let workout;\n\n    // If workout running, create running object\n    if (type === 'running') {\n      const cadence = +inputCadence.value;\n\n      // Check if data is valid\n      if (\n        // !Number.isFinite(distance) ||\n        // !Number.isFinite(duration) ||\n        // !Number.isFinite(cadence)\n        !validInputs(distance, duration, cadence) ||\n        !allPositive(distance, duration, cadence)\n      )\n        return alert('Inputs have to be positive numbers!');\n\n      workout = new Running([lat, lng], distance, duration, cadence);\n    }\n\n    // If workout cycling, create cycling object\n    if (type === 'cycling') {\n      const elevation = +inputElevation.value;\n\n      if (\n        !validInputs(distance, duration, elevation) ||\n        !allPositive(distance, duration)\n      )\n        return alert('Inputs have to be positive numbers!');\n\n      workout = new Cycling([lat, lng], distance, duration, elevation);\n    }\n\n    // Add new object to workout array\n    this.#workouts.push(workout);\n\n    // Render workout on map as marker\n    this._renderWorkoutMarker(workout);\n\n    // Render workout on list\n    this._renderWorkout(workout);\n\n    // Hide form + clear input fields\n    this._hideForm();\n\n    // Set local storage to all workouts\n    this._setLocalStorage();\n  }\n\n  _renderWorkoutMarker(workout) {\n    L.marker(workout.coords)\n      .addTo(this.#map)\n      .bindPopup(\n        L.popup({\n          maxWidth: 250,\n          minWidth: 100,\n          autoClose: false,\n          closeOnClick: false,\n          className: `${workout.type}-popup`,\n        })\n      )\n      .setPopupContent(\n        `${workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'} ${workout.description}`\n      )\n      .openPopup();\n  }\n\n  _renderWorkout(workout) {\n    let html = `\n      <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n        <h2 class=\"workout__title\">${workout.description}</h2>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">${\n            workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'\n          }</span>\n          <span class=\"workout__value\">${workout.distance}</span>\n          <span class=\"workout__unit\">km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⏱</span>\n          <span class=\"workout__value\">${workout.duration}</span>\n          <span class=\"workout__unit\">min</span>\n        </div>\n    `;\n\n    if (workout.type === 'running')\n      html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⚡️</span>\n          <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\n          <span class=\"workout__unit\">min/km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">🦶🏼</span>\n          <span class=\"workout__value\">${workout.cadence}</span>\n          <span class=\"workout__unit\">spm</span>\n        </div>\n      </li>\n      `;\n\n    if (workout.type === 'cycling')\n      html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⚡️</span>\n          <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\n          <span class=\"workout__unit\">km/h</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⛰</span>\n          <span class=\"workout__value\">${workout.elevationGain}</span>\n          <span class=\"workout__unit\">m</span>\n        </div>\n      </li>\n      `;\n\n    form.insertAdjacentHTML('afterend', html);\n  }\n\n  _moveToPopup(e) {\n    // BUGFIX: When we click on a workout before the map has loaded, we get an error. But there is an easy fix:\n    if (!this.#map) return;\n\n    const workoutEl = e.target.closest('.workout');\n\n    if (!workoutEl) return;\n\n    const workout = this.#workouts.find(\n      work => work.id === workoutEl.dataset.id\n    );\n\n    this.#map.setView(workout.coords, this.#mapZoomLevel, {\n      animate: true,\n      pan: {\n        duration: 1,\n      },\n    });\n\n    // using the public interface\n    // workout.click();\n  }\n\n  _setLocalStorage() {\n    localStorage.setItem('workouts', JSON.stringify(this.#workouts));\n  }\n\n  _getLocalStorage() {\n    const data = JSON.parse(localStorage.getItem('workouts'));\n\n    if (!data) return;\n\n    this.#workouts = data;\n\n    this.#workouts.forEach(work => {\n      this._renderWorkout(work);\n    });\n  }\n\n  reset() {\n    localStorage.removeItem('workouts');\n    location.reload();\n  }\n}\n\nconst app = new App();\n"],"names":["Workout","coords","distance","duration","$e16b98a558ec4c044403bade87d68b4$var$_classCallCheck","this","$e16b98a558ec4c044403bade87d68b4$var$_defineProperty","Date","now","slice","description","concat","type","toUpperCase","date","getMonth","getDate","clicks","Running","cadence","_this","$e16b98a558ec4c044403bade87d68b4$var$_assertThisInitialized","_super","call","calcPace","_setDescription","pace","Cycling","elevationGain","_this2","_super2","calcSpeed","speed","form","document","querySelector","containerWorkouts","inputType","inputDistance","inputDuration","inputCadence","inputElevation","App","$e16b98a558ec4c044403bade87d68b4$var$_map","set","writable","value","$e16b98a558ec4c044403bade87d68b4$var$_mapZoomLevel","$e16b98a558ec4c044403bade87d68b4$var$_mapEvent","$e16b98a558ec4c044403bade87d68b4$var$_workouts","_getPosition","_getLocalStorage","addEventListener","_newWorkout","bind","_toggleElevationField","_moveToPopup","navigator","geolocation","getCurrentPosition","_loadMap","alert","position","_this3","latitude","longitude","$e16b98a558ec4c044403bade87d68b4$var$_classPrivateFieldSet","L","map","setView","$e16b98a558ec4c044403bade87d68b4$var$_classPrivateFieldGet","tileLayer","attribution","addTo","on","_showForm","forEach","work","_renderWorkoutMarker","mapE","classList","remove","focus","style","display","add","setTimeout","closest","toggle","e","validInputs","_len","arguments","length","inputs","Array","_key","every","inp","Number","isFinite","allPositive","_len2","_key2","preventDefault","workout","_classPrivateFieldGet2","latlng","lat","lng","elevation","push","_renderWorkout","_hideForm","_setLocalStorage","marker","bindPopup","popup","maxWidth","minWidth","autoClose","closeOnClick","className","setPopupContent","openPopup","html","id","toFixed","insertAdjacentHTML","workoutEl","target","find","dataset","animate","pan","localStorage","setItem","JSON","stringify","_this4","data","parse","getItem","removeItem","location","reload"],"version":3,"file":"script.HASH_REF_bc9b72eaf1d1ffa1deab92aaf8fedd2a.js.map"}